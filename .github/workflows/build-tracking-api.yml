name: Build and Deploy Tracking API

on:
  push:
    paths:
      - 'tracking-manager/packages/tracking-api/**'
      - '.github/workflows/build-tracking-api.yml'
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/tracking-api-kltn2025
  API_DIR: ./tracking-manager/packages/tracking-api
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  VAULT_SECRET_PATH: production/data/.env
  CONTAINER_NAME: tracking-api-kltn2025-container

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log execution info
        run: |
          echo "Workflow triggered by: ${{ github.actor }}"
          echo "Current time: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "Running in repository: ${{ github.repository }}"

      - name: Import Secrets from Vault
        id: vault-secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ env.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            ${{ env.VAULT_SECRET_PATH }} MONGO_HOST ;
            ${{ env.VAULT_SECRET_PATH }} RABBITMQ_USER ;
            ${{ env.VAULT_SECRET_PATH }} RABBITMQ_PW ;
            ${{ env.VAULT_SECRET_PATH }} RABBITMQ_HOST ;
            ${{ env.VAULT_SECRET_PATH }} RABBITMQ_PORT ;
            ${{ env.VAULT_SECRET_PATH }} RABBITMQ_VHOST ;
            ${{ env.VAULT_SECRET_PATH }} REDIS_HOST ;
            ${{ env.VAULT_SECRET_PATH }} REDIS_PORT ;
            ${{ env.VAULT_SECRET_PATH }} REDIS_PASSWORD ;
            ${{ env.VAULT_SECRET_PATH }} SUPABASE_PASS ;
            ${{ env.VAULT_SECRET_PATH }} SUPABASE_key ;
            ${{ env.VAULT_SECRET_PATH }} SUPABSE_URL ;
            ${{ env.VAULT_SECRET_PATH }} API_MONGO_USER ;
            ${{ env.VAULT_SECRET_PATH }} API_MONGO_PWS ;
            ${{ env.VAULT_SECRET_PATH }} API_MONGO_DB ;
            ${{ env.VAULT_SECRET_PATH }} ES_HOST ;
            ${{ env.VAULT_SECRET_PATH }} ES_PORT ;
            ${{ env.VAULT_SECRET_PATH }} ES_USER ;
            ${{ env.VAULT_SECRET_PATH }} ES_PW ;
            ${{ env.VAULT_SECRET_PATH }} PAYMENT_API_URL ;
            ${{ env.VAULT_SECRET_PATH }} GMAIL_PASS ;
            ${{ env.VAULT_SECRET_PATH }} GMAIL_USER ;
            ${{ env.VAULT_SECRET_PATH }} JWT_PRIVATE_KEY ;
            ${{ env.VAULT_SECRET_PATH }} JWT_PUBLIC_KEY ;
            ${{ env.VAULT_SECRET_PATH }} ALGORITHM ;

      - name: Create .env file
        run: |
          # Create directory if it doesn't exist
          mkdir -p ${{ env.API_DIR }}
          
          # Create .env file with all variables
          cat > ${{ env.API_DIR }}/.env << EOL
          MONGO_HOST=${{ env.MONGO_HOST }}
          RABBITMQ_USER=${{ env.RABBITMQ_USER }}
          RABBITMQ_PW=${{ env.RABBITMQ_PW }}
          RABBITMQ_HOST=${{ env.RABBITMQ_HOST }}
          RABBITMQ_PORT=${{ env.RABBITMQ_PORT }}
          RABBITMQ_VHOST=${{ env.RABBITMQ_VHOST }}
          REDIS_HOST=${{ env.REDIS_HOST }}
          REDIS_PORT=${{ env.REDIS_PORT }}
          REDIS_PASSWORD=${{ env.REDIS_PASSWORD }}
          SUPABASE_PASS=${{ env.SUPABASE_PASS }}
          SUPABASE_key=${{ env.SUPABASE_key }}
          SUPABSE_URL=${{ env.SUPABSE_URL }}
          API_MONGO_USER=${{ env.API_MONGO_USER }}
          API_MONGO_PWS=${{ env.API_MONGO_PWS }}
          API_MONGO_DB=${{ env.API_MONGO_DB }}
          ES_HOST=${{ env.ES_HOST }}
          ES_PORT=${{ env.ES_PORT }}
          ES_USER=${{ env.ES_USER }}
          ES_PW=${{ env.ES_PW }}
          PAYMENT_API_URL=${{ env.PAYMENT_API_URL }}
          GMAIL_PASS=${{ env.GMAIL_PASS }}
          GMAIL_USER=${{ env.GMAIL_USER }}
          JWT_PRIVATE_KEY=${{ env.JWT_PRIVATE_KEY }}
          JWT_PUBLIC_KEY=${{ env.JWT_PUBLIC_KEY }}
          ALGORITHM=${{ env.ALGORITHM }}
          EOL
          
          echo "Created .env file from environment variables"

      # Fix GHCR authentication
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Attempt with PAT if GITHUB_TOKEN fails
      - name: Log in to GitHub Container Registry with PAT (Fallback)
        if: failure()
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.API_DIR }}
          file: ${{ env.API_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            MONGO_HOST=${{ env.MONGO_HOST }}
            RABBITMQ_USER=${{ env.RABBITMQ_USER }}
            RABBITMQ_PW=${{ env.RABBITMQ_PW }}
            RABBITMQ_HOST=${{ env.RABBITMQ_HOST }}
            RABBITMQ_PORT=${{ env.RABBITMQ_PORT }}
            RABBITMQ_VHOST=${{ env.RABBITMQ_VHOST }}
            REDIS_HOST=${{ env.REDIS_HOST }}
            REDIS_PORT=${{ env.REDIS_PORT }}
            REDIS_PASSWORD=${{ env.REDIS_PASSWORD }}
            SUPABASE_PASS=${{ env.SUPABASE_PASS }}
            SUPABASE_key=${{ env.SUPABASE_key }}
            SUPABSE_URL=${{ env.SUPABSE_URL }}
            API_MONGO_USER=${{ env.API_MONGO_USER }}
            API_MONGO_PWS=${{ env.API_MONGO_PWS }}
            API_MONGO_DB=${{ env.API_MONGO_DB }}
            ES_HOST=${{ env.ES_HOST }}
            ES_PORT=${{ env.ES_PORT }}
            ES_USER=${{ env.ES_USER }}
            ES_PW=${{ env.ES_PW }}
            PAYMENT_API_URL=${{ env.PAYMENT_API_URL }}
            GMAIL_PASS=${{ env.GMAIL_PASS }}
            GMAIL_USER=${{ env.GMAIL_USER }}
            JWT_PRIVATE_KEY=${{ env.JWT_PRIVATE_KEY }}
            JWT_PUBLIC_KEY=${{ env.JWT_PUBLIC_KEY }}
            ALGORITHM=${{ env.ALGORITHM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "Logging into GHCR..."
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            echo "Pulling latest image: ${{ env.IMAGE_NAME }}:latest"
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            echo "Stopping old container (if exists): ${{ env.CONTAINER_NAME }}"
            docker stop ${{ env.CONTAINER_NAME }} || true
            
            echo "Removing old container (if exists): ${{ env.CONTAINER_NAME }}"
            docker rm ${{ env.CONTAINER_NAME }} || true
            
            echo "Running new container: ${{ env.CONTAINER_NAME }}"
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              -p 8000:80 \
              --restart always \
              -e MONGO_HOST="${{ env.MONGO_HOST }}" \
              -e RABBITMQ_USER="${{ env.RABBITMQ_USER }}" \
              -e RABBITMQ_PW="${{ env.RABBITMQ_PW }}" \
              -e RABBITMQ_HOST="${{ env.RABBITMQ_HOST }}" \
              -e RABBITMQ_PORT="${{ env.RABBITMQ_PORT }}" \
              -e RABBITMQ_VHOST="${{ env.RABBITMQ_VHOST }}" \
              -e REDIS_HOST="${{ env.REDIS_HOST }}" \
              -e REDIS_PORT="${{ env.REDIS_PORT }}" \
              -e REDIS_PASSWORD="${{ env.REDIS_PASSWORD }}" \
              -e SUPABASE_PASS="${{ env.SUPABASE_PASS }}" \
              -e SUPABASE_key="${{ env.SUPABASE_key }}" \
              -e SUPABSE_URL="${{ env.SUPABSE_URL }}" \
              -e API_MONGO_USER="${{ env.API_MONGO_USER }}" \
              -e API_MONGO_PWS="${{ env.API_MONGO_PWS }}" \
              -e API_MONGO_DB="${{ env.API_MONGO_DB }}" \
              -e ES_HOST="${{ env.ES_HOST }}" \
              -e ES_PORT="${{ env.ES_PORT }}" \
              -e ES_USER="${{ env.ES_USER }}" \
              -e ES_PW="${{ env.ES_PW }}" \
              -e PAYMENT_API_URL="${{ env.PAYMENT_API_URL }}" \
              -e GMAIL_PASS="${{ env.GMAIL_PASS }}" \
              -e GMAIL_USER="${{ env.GMAIL_USER }}" \
              -e JWT_PRIVATE_KEY="${{ env.JWT_PRIVATE_KEY }}" \
              -e JWT_PUBLIC_KEY="${{ env.JWT_PUBLIC_KEY }}" \
              -e ALGORITHM="${{ env.ALGORITHM }}" \
              ${{ env.IMAGE_NAME }}:latest
            
            echo "Pruning old Docker images..."
            docker image prune -af
            
            echo "Deployment completed successfully!"